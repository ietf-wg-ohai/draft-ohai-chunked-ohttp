{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-01-14T00:55:44.612847+00:00",
  "repo": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "discuss",
      "description": "",
      "color": "d93f0b"
    },
    {
      "name": "ready for text",
      "description": "",
      "color": "BFDF0F"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOJtaXUM5s53rI",
      "title": "Rename streamed",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/1",
      "state": "CLOSED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Rename streamed -> chunked?",
      "createdAt": "2023-07-28T21:31:36Z",
      "updatedAt": "2023-07-31T22:35:45Z",
      "closedAt": "2023-07-31T22:35:45Z",
      "comments": []
    },
    {
      "number": 2,
      "id": "I_kwDOJtaXUM5s54Oy",
      "title": "Expand applicability explanation",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/2",
      "state": "CLOSED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Explain when to use this instead of non-chunked OHTTP\r\n- Explain when to use this instead of MASQUE\r\n  - Specifically:\r\n  - OHTTP relay has a strong trust relationship with the gateway; forward proxies don't have that\r\n  - Talking to a server deeper in HTTP load balancer networks, etc, is more easily accessible with OHTTP",
      "createdAt": "2023-07-28T21:34:37Z",
      "updatedAt": "2023-08-17T15:42:32Z",
      "closedAt": "2023-08-17T15:42:32Z",
      "comments": []
    },
    {
      "number": 3,
      "id": "I_kwDOJtaXUM5s-OaN",
      "title": "Consider restriction to only allow response after complete request",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/3",
      "state": "CLOSED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In order to simplify analysis and deviate less from the original design of OHTTP, consider adding a restriction to only allow response after complete request.",
      "createdAt": "2023-07-31T02:21:13Z",
      "updatedAt": "2024-12-06T17:44:56Z",
      "closedAt": "2024-12-06T17:44:56Z",
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "One risk here is that having multiple back-and-forth interactions reveals can reveal timing information to the gateway.\r\n\r\nOne case where this may still be allowed is Expect 100-continue.",
          "createdAt": "2023-08-17T03:23:09Z",
          "updatedAt": "2023-08-17T03:23:09Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure that this is necessary.  I would instead signpost the risks involved very clearly.\r\n\r\nFundamentally, the goal of OHTTP is to enable the creation of an isolated context.  What happens within that context could be arbitrarily complex, provided that the actions taken do not draw on information outside of that context.  So you can even string together multiple OHTTP requests, if you are prepared to accept some of the limitations of that.  This 100-continue thing leaks too, but maybe that leakage is acceptable.",
          "createdAt": "2023-08-17T03:28:19Z",
          "updatedAt": "2023-08-17T03:28:19Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I should mention that any interactive use of OHTTP (the date correction stuff, 100-continue) reveals RTT to the client, which is a privacy leak.  That's worth mentioning as an additional concern even if you successfully isolate the interaction in all other ways.",
          "createdAt": "2023-08-17T03:38:35Z",
          "updatedAt": "2023-08-17T03:38:35Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On balance, having a mechanism to prevent premature use of chunks (i.e., using chunks before the whole object has been authenticated) feels like the right outcome here. I don't know if signposts would be enough. ",
          "createdAt": "2023-09-18T20:38:21Z",
          "updatedAt": "2023-09-18T20:38:21Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Isn't that mechanism just \"don't use this chunking stuff\"?",
          "createdAt": "2023-09-19T00:16:34Z",
          "updatedAt": "2023-09-19T00:16:34Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No, I don't think so. I can certainly imagine applications misusing this for performance reasons. It's like the equivalent of using AEAD plaintext before actually checking the tag for integrity.",
          "createdAt": "2023-09-19T00:17:33Z",
          "updatedAt": "2023-09-19T00:17:33Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "I think our general trend here is to document the concern of interactivity, not to prevent it. See #31 ",
          "createdAt": "2024-12-06T17:44:56Z",
          "updatedAt": "2024-12-06T17:44:56Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOJtaXUM5uCXWI",
      "title": "Negotiating use",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/5",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready for text"
      ],
      "body": "We need a section on how a client or gateway might indicate that they are able to use this.\r\n\r\nUse of something like this falls under the general configuration of a gateway, so that consistency requirements apply.  If clients have an inconsistent view of support for chunking, then they will be more identifiable as a result.  We need language about that too.",
      "createdAt": "2023-08-11T02:32:49Z",
      "updatedAt": "2024-12-09T04:24:54Z",
      "closedAt": "2024-12-09T04:24:54Z",
      "comments": []
    },
    {
      "number": 7,
      "id": "I_kwDOJtaXUM5uRM1C",
      "title": "Maximum chunk size",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/7",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready for text"
      ],
      "body": "Varints for lengths have this problem where they can be very large, requiring a lot of memory. Even TLS has this problem and it only has 16k chunks. It would be good to have some way to negotiate chunk size. This ends up being a little weird though.\r\n\r\nIf you have too many size options, that leaks client details in a way that might be identifying.\r\n\r\nIf you negotiate on the outside of the encapsulation, the relay has to know to forward it. If you negotiate on the inside, it might end up going to the target and not the gateway.\r\n\r\nThat is, this is much like #5: we will need to be careful.",
      "createdAt": "2023-08-14T15:20:37Z",
      "updatedAt": "2024-12-09T02:05:39Z",
      "closedAt": "2024-12-09T02:05:39Z",
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "I wonder if this needs to be explicitly addressed? If we look at OHTTP _without_ chunking, there is no max size (other than the number of bytes that can be in the outer stream/body. If we view chunking as a way to allow incremental processing of something that otherwise would be one larger OHTTP message, it will always be strictly less memory than it would have been otherwise.\r\n\r\nIt is a good point that a particular chunk size could fingerprint a client if it was very consistent; similarly, the chunk size could reveal information to the relay about the contents (although the overall message size can too).",
          "createdAt": "2023-08-14T15:41:15Z",
          "updatedAt": "2023-08-14T15:41:15Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "At IETF 121, discussed having a 16K maximum chunk size if the peer's supported size is otherwise not known.",
          "createdAt": "2024-12-02T03:52:59Z",
          "updatedAt": "2024-12-02T03:52:59Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOJtaXUM5xWYCa",
      "title": "Maximum number of chunks",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/9",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "ready for text"
      ],
      "body": "This is trivial, but the draft should note that there's a maximum number of chunks permissible before things break. For responses in particular, 2^Nn chunks will yield (key, nonce) reuse, which should be avoided.",
      "createdAt": "2023-09-18T20:29:27Z",
      "updatedAt": "2024-07-08T22:05:06Z",
      "closedAt": "2024-07-08T22:05:06Z",
      "comments": []
    },
    {
      "number": 10,
      "id": "I_kwDOJtaXUM5xWYx1",
      "title": "Analysis",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/10",
      "state": "OPEN",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Since the design is basically HPKE for requests and TLS record layer for responses, I wonder if the document would benefit from leaning on existing analyses for these things, and [this](https://www.microsoft.com/en-us/research/wp-content/uploads/2017/08/191.pdf) in particular.",
      "createdAt": "2023-09-18T20:31:18Z",
      "updatedAt": "2023-09-18T20:31:18Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 12,
      "id": "I_kwDOJtaXUM5xWaVq",
      "title": "response_nonce is set twice",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/12",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The draft reads:\r\n\r\n```\r\nFor responses, the first piece of data sent back is the response nonce, as in the non-chunked variant.[\u00b6](https://tfpauly.github.io/draft-ohai-chunked-ohttp/draft-ohai-chunked-ohttp.html#section-6.2-1)\r\n\r\nentropy = max(Nn, Nk)\r\nresponse_nonce = random(entropy)\r\n```\r\n\r\nAnd then:\r\n\r\n```\r\nEach chunk is sealed using the same AEAD key and AEAD nonce that are derived for the non-chunked variant, which are calculated as follows:[\u00b6](https://tfpauly.github.io/draft-ohai-chunked-ohttp/draft-ohai-chunked-ohttp.html#section-6.2-3)\r\n\r\nsecret = context.Export(\"message/bhttp chunked response\", entropy)\r\nresponse_nonce = random(entropy)\r\nsalt = concat(enc, response_nonce)\r\nprk = Extract(salt, secret)\r\naead_key = Expand(prk, \"key\", Nk)\r\naead_nonce = Expand(prk, \"nonce\", Nn)\r\n```\r\n\r\nI don't think the intended effect is to have `response_nonce` be different in the header and in the key derivation step. The current text seems to imply that the header first carries a randomly generated `response_nonce`, and then each subsequent response chunk is encrypted using a different `response_nonce`. \r\n\r\nProbably the simple thing to do here is just drop the second `response_nonce` derivation, like so:\r\n\r\n```diff\r\n secret = context.Export(\"message/bhttp chunked response\", entropy)\r\n-response_nonce = random(entropy)\r\n salt = concat(enc, response_nonce)\r\n prk = Extract(salt, secret)\r\n aead_key = Expand(prk, \"key\", Nk)\r\n```",
      "createdAt": "2023-09-18T20:35:46Z",
      "updatedAt": "2023-09-19T02:18:04Z",
      "closedAt": "2023-09-19T02:18:04Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "So there are two nonces involved here:\r\n\r\n1. The nonce used to diversify keying material for responses.  This exists as defense in depth against the use of a two-time pad in the event that a request is replayed.\r\n2. The AEAD (base) nonce, which is used by the AEAD in the usual way.  Unlike regular OHTTP, this is overlaid with a counter using the same method as in TLS.\r\n\r\nThis is deliberate and I think that we need both.",
          "createdAt": "2023-09-19T00:15:15Z",
          "updatedAt": "2023-09-19T00:15:15Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Right, there are two nonces, but as the diff above suggests, `response_nonce` (the one used for diversifying key material) is currently confusingly specified. Is it computed once or twice? I'm not suggesting to remove the `aead_nonce`.",
          "createdAt": "2023-09-19T00:16:39Z",
          "updatedAt": "2023-09-19T00:16:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh, I see.  I need more sleep.  Yes.",
          "createdAt": "2023-09-19T00:17:50Z",
          "updatedAt": "2023-09-19T00:17:50Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOJtaXUM5xWbUS",
      "title": "Test vectors",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/13",
      "state": "OPEN",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "ready for text"
      ],
      "body": "We should probably have some!",
      "createdAt": "2023-09-18T20:38:34Z",
      "updatedAt": "2024-12-10T17:30:43Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 16,
      "id": "I_kwDOJtaXUM58aSQd",
      "title": "Pseudocode for decoding",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/16",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready for text"
      ],
      "body": "Decoding is a tiny bit more fiddly than encoding.  It might be worth adding an appendix with the appropriate logic.\r\n\r\n(I still need to implement it myself, FWIW.)",
      "createdAt": "2024-01-18T00:50:59Z",
      "updatedAt": "2024-12-09T22:55:10Z",
      "closedAt": "2024-12-09T22:55:10Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Tommy and I discussed this and the main outstanding problem that might exist is on the sending side.  How to ensure that you correctly chunk the end of the incoming stream is a little tricky.  You can try to read ahead, but that's not always going to work out.  Chances are, you will end up with a zero-sized chunk at the end of a stream, at least sometimes.  That's probably enough of a fine detail that we don't need to say much.",
          "createdAt": "2024-12-09T22:55:10Z",
          "updatedAt": "2024-12-09T22:55:10Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOJtaXUM58gdP2",
      "title": "Describe large upload use case",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/18",
      "state": "CLOSED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, OHTTP has no maximum size, so a server that is willing to accept large requests is forced to buffer unbounded messages before knowing if they can be decrypted, or if they will be served. Chunking allows the server to validate the HPKE encryption and request headers in the first chunk before accepting the rest of the request. Chunking also allows endpoints to write data out after decrypting, instead of holding the entire message in memory.",
      "createdAt": "2024-01-18T18:59:51Z",
      "updatedAt": "2024-12-06T17:06:24Z",
      "closedAt": "2024-12-06T17:06:24Z",
      "comments": []
    },
    {
      "number": 19,
      "id": "I_kwDOJtaXUM6D2fWp",
      "title": "incremental forwarding of HTTP messages is not a guaranteed property of HTTP semantics",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/19",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "Chunked Oblivious HTTP Messages relies on incremental delivery of HTTP request; as the client sends some chunks of an HTTP POST request, the server is expected to respond to them by sending chunks of an HTTP response.\r\n\r\nThis approach contradicts to what HTTP semantics states and has interoperability issues with proxies that buffer the entire request before starting to forward the request to the backend servers.\r\n\r\nSpecifically, [RFC 9110 section 7.6](https://datatracker.ietf.org/doc/html/rfc9110#name-message-forwarding) states:\r\n> An HTTP message can be parsed as a stream for incremental processing or forwarding downstream. However, senders and recipients cannot rely on incremental delivery of partial messages, since some implementations will buffer or delay message forwarding for the sake of network efficiency, security checks, or content transformations.\r\n\r\nWhen these buffering intermediaries are involved, Chunked Oblivious HTTP Messages will not work, and clients would see timeouts.\r\n\r\nConsidering that what we are developing is an application of HTTP, it would make sense to design the new protocol in a way that it does not add restrictions to HTTP semantics.\r\n\r\nOne way of moving forward would be to use extended CONNECT instead of HTTP POST for opening the bi-directional stream on which we exchange Chunked OHTTP Messages.",
      "createdAt": "2024-03-28T00:15:51Z",
      "updatedAt": "2024-10-19T02:40:59Z",
      "closedAt": "2024-10-19T02:40:59Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Another option is to acknowledge that intermediaries with these properties that are involved in a particular deployment can be identified and fixed.  I understand that Tommy discovered a few like this after implementing and deploying this.\r\n\r\nThe other thing is that this doesn't necessarily invalidate the design.  The goal is to enable incremental processing, which can be achieved with buffering.  What is not possible is things like 100-continue (which remains a misfeature for the reasons you describe, at least in my mind).",
          "createdAt": "2024-03-28T04:58:23Z",
          "updatedAt": "2024-03-28T04:58:23Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "NONE",
          "body": "@martinthomson \r\n> Another option is to acknowledge that intermediaries with these properties that are involved in a particular deployment can be identified and fixed. I understand that Tommy discovered a few like this after implementing and deploying this.\r\n\r\nI'm not sure if such an approach would be possible or beneficial for the ecosystem.\r\n\r\nHTTP/2 and HTTP/3 allows clients a issue large number of requests at once (e.g., 100). But servers often do not process all requests in parallel. It is often the case that the number of requests that are processed concurrently is rather small (e.g., 10), while other requests are \"buffered.\" By doing so, the backend applications are protected from DoS attacks, while the bandwidth of the connection is fully utilized.\r\n\r\nTo paraphrase, the ability to buffer requests is a key pillar of HTTP/2 and 3. It is not a misfeature.\r\n\r\nCONNECT and extended CONNECT are exceptions. That is fine, because every intermediary would recognize that they are exceptions. When receiving too many requests at once, they have the option to respond with 429 Too Many Requests.\r\n\r\nBut POST does not work like that. Proxies are designed to be transparent to the content-type being used.\r\n\r\nThe problem with current design is that it requires proxies to have a list of mime types that have to be processed like CONNECT. I do not see a reason to choose such an approach when we can choose to use extended CONNECT that provides the necessary semantics.",
          "createdAt": "2024-03-28T08:57:45Z",
          "updatedAt": "2024-03-28T09:01:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm saying 100-continue is the misfeature, not the buffering.\r\n\r\nAn arrangement like you describe is beneficial, but it might not be always the right answer, depending on the backend capabilities and the application.  OHTTP relays do provide some DoS mitigation, but maybe limiting request volume is not the axis along which the relay needs to operate its protections.\r\n\r\nI'm not suggesting that this is a per-content-type thing, but a per-resource or really per-service thing.  If anything at all.  The design works well enough with buffering at an intermediary (modulo 100-continue and other similar arrangements).  I'd go futher and say that there are privacy benefits to buffering.",
          "createdAt": "2024-03-29T01:24:37Z",
          "updatedAt": "2024-03-29T01:24:37Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "NONE",
          "body": "> I'm not suggesting that this is a per-content-type thing, but a per-resource or really per-service thing. If anything at all. The design works well enough with buffering at an intermediary (modulo 100-continue and other similar arrangements).\r\n\r\nFirstly, the design does not work well with buffering, at least with intermediaries that buffer the whole request or a non-negligible amount of bytes before starting to forward request to the backend. As stated, such behavior is common among the intermediaries.\r\n\r\nSecondly, this is the first time I've heard HTTP clients complaining about the buffering behavior. That makes me believe that Chunked OHTTP is asking for an exception, rather than turning on a per-resource or per-service config.",
          "createdAt": "2024-03-29T01:33:17Z",
          "updatedAt": "2024-03-29T01:33:42Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "NONE",
          "body": "If I may ask, what is the benefit of choosing HTTP POST over extended CONNECT or websockets, when use of HTTP POST adds restrictions to HTTP semantics and has actual interoperability issues? In https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/19#issuecomment-2024396101 you state you've already seen them.",
          "createdAt": "2024-03-29T01:43:09Z",
          "updatedAt": "2024-03-29T01:43:09Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "In talking with others (at your employer, even), POST is considerably less complex to deploy than CONNECT.  At the point you engage CONNECT, then MASQUE starts looking a whole lot better.  It's much more expensive and the ends, but still.\r\n\r\n> Secondly, this is the first time I've heard HTTP clients complaining about the buffering behavior. \r\n\r\nThat's not coming from me.  Buffering at intermediaries is mostly not a problem from my perspective.",
          "createdAt": "2024-03-29T01:56:22Z",
          "updatedAt": "2024-03-29T01:56:22Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "NONE",
          "body": "@martinthomson \r\n> In talking with others (at your employer, even), POST is considerably less complex to deploy than CONNECT. At the point you engage CONNECT, then MASQUE starts looking a whole lot better. It's much more expensive and the ends, but still.\r\n\r\nThat sounds like we made the wrong choice with masque (and other extensions being developed on top of extended CONNECT; e.g., connect-tcp). That is because we could equally argue that masque could have been developed on top of HTTP POST, with a per-resource or per-service config in the intermediaries to not buffer the bytes for too long?\r\n\r\nAre you actually suggesting that, or is there a reason to believe the situation is different with Chunked OHTTP?\r\n\r\nPS. Re my employer, I think our stance is that POST is easier in the short term, but the long term consequences could be different (though the answer might depend on who you asked as well as when).",
          "createdAt": "2024-03-29T01:59:54Z",
          "updatedAt": "2024-03-29T02:09:11Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "NONE",
          "body": "FWIW, [RFC 9205 section 3.1](https://www.rfc-editor.org/rfc/rfc9205.html#name-generic-semantics) states:\r\n> This split between generic and application-specific semantics allows an HTTP message to be handled by common software (e.g., HTTP servers, intermediaries, client implementations, and caches) without requiring those implementations to understand the application in use. It also allows people to leverage their knowledge of HTTP semantics without needing specialised knowledge of a particular application.\r\n> \r\n> Therefore, applications that use HTTP MUST NOT redefine, **refine**, or overlay the semantics of generic protocol elements such as methods, status codes, or existing header fields. Instead, they should focus their specifications on protocol elements that are specific to that application -- namely, their HTTP resources.\r\n\r\nI wonder if the current state of Chunked OHTTP requiring intermediaries to start forwarding chunks of requests before receiving entire request violates this MUST (cc @mnot).",
          "createdAt": "2024-03-29T02:22:15Z",
          "updatedAt": "2024-03-29T02:22:15Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "My initial inclination is to interpret this how @martinthomson does \u2014 essentially, that while POST clients \"cannot rely on incremental delivery\" in general, specific services can indeed provide incremental delivery where it is beneficial and desirable. An OHTTP relay that wants to support chunked OHTTP thus has an incentive to allow incremental delivery. It isn't violating HTTP semantics by buffering, but it isn't being very helpful to its clients. Since OHTTP relays are generally set up for specific services and relationships, this seems like a tractable problem.\r\n\r\nFrom my reading, the text about incremental delivery isn't normative; deployments can choose to do incremental delivery or not, depending on their situation.\r\n\r\nI don't think I'd say that chunked OHTTP as a protocol is _requiring_ that intermediaries do incremental forwarding; instead, its the clients of relays that will complain when they aren't getting their desired behavior.",
          "createdAt": "2024-03-29T15:45:48Z",
          "updatedAt": "2024-03-29T15:45:48Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "NONE",
          "body": "Note that buffering is mostly done by intermediaries doing things like virus scanning, often on-box. ",
          "createdAt": "2024-03-29T21:45:16Z",
          "updatedAt": "2024-03-29T21:45:16Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "NONE",
          "body": "@mnot \r\n> Note that buffering is mostly done by intermediaries doing things like virus scanning, often on-box.\r\n\r\nOr intermediaries that try to reduce concurrency to nearby back-end servers, which I think is fairly common.\r\n\r\nLooking back the history, one of the reasons people have deployed Nginx in front of preforking application servers (incl. Apache HTTP server + mod_php) is to use Nginx as a buffer for reducing concurrency. Preforking servers cannot handle as many connections as a event-driven server does. Therefore, it makes (or made) sense to let Nginx to buffer highly concurrent but slowly arriving requests until the entire request is received. Once each request is received completely, Nginx opens a connection to the backend and starts forwarding the request.\r\n\r\nProxies do provide knobs for changing the behavior. In case of Nginx, the knob is [`proxy_request_buffering`](http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_request_buffering). But the default is `on`, meaning that Nginx will try to buffer the entire request.\r\n\r\n@tfpauly \r\n> My initial inclination is to interpret this how @martinthomson does \u2014 essentially, that while POST clients \"cannot rely on incremental delivery\" in general, specific services can indeed provide incremental delivery where it is beneficial and desirable.\r\n\r\nI'm not sure if I agree with the interpretation considering that the MUST NOT in RFC 9205 section 3.1 follows this sentence: _This split between generic and application-specific semantics allows an HTTP message to be handled by common software (e.g., HTTP servers, intermediaries, client implementations, and caches) **without requiring those implementations to understand the application in use**_ (emphasis mine).\r\n\r\nBut even if we ignore RFC 9205, I'm still stuck with [this question](https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/19#issuecomment-2026468705).\r\n\r\nTo me, all the argument to use HTTP POST for Chunked OHTTTP seem to be equally applicable to WebSockets over H2/H3, masque, or connect-tcp. The arguments can be (or could have been) used to say that masque or connect-tcp should be built on top of HTTP POST, because the servers / intermediaries could be configured to start forwarding bytes without buffering at a per-resource basis.\r\n\r\nBut we chose to use extended CONNECT. Is there a reason to believe that for POST is a better choice for Chunked OHTTP while extended CONNECT is (was) a better choice for WebSockets over H2/H3, masque, and connect-udp?",
          "createdAt": "2024-03-30T00:37:08Z",
          "updatedAt": "2024-03-30T00:43:37Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "We now have https://www.ietf.org/archive/id/draft-kazuho-httpbis-incremental-http-00.html, hooray! I'll add a reference.",
          "createdAt": "2024-10-15T14:41:47Z",
          "updatedAt": "2024-10-15T14:41:47Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "I_kwDOJtaXUM6H4sfr",
      "title": "Be more explicit about interactivity",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/20",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Note that the relay might buffer, which is OK.  But if you expect to interact (that is, multiple rounds of communication), buffering will make things break.\r\n\r\nThis is not going to work for 100-continue, so we should note that.  But maybe clients can arrange with intermediaries to disabling buffering for that case.  This will work anyway unless the buffering is indefinite.",
      "createdAt": "2024-05-05T23:21:16Z",
      "updatedAt": "2024-10-19T02:41:00Z",
      "closedAt": "2024-10-19T02:41:00Z",
      "comments": []
    },
    {
      "number": 23,
      "id": "I_kwDOJtaXUM6Q6nVF",
      "title": "Add warning about perfect forward secrey",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/23",
      "state": "CLOSED",
      "author": "DavidSchinazi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Chunked OHTTP doesn't have perfect forward secrecy. In most scenarios, HTTPS is a better fit, with TLS 0-RTT to improve latency. HTTPS-over-CONNECT-over-HTTPS with TLS 0-RTT is a better fit for most applications that want the privacy guarantees of such a system, with one exception: when separate requests need to be uncorrelatable. That's because TLS 0-RTT uses TLS session tickets which allow linkability. I think we should add some text to security considerations here to make the tradeoffs clear. We don't want someone to accidentally lose perfect forward secrecy.",
      "createdAt": "2024-07-26T02:20:18Z",
      "updatedAt": "2024-10-19T02:45:41Z",
      "closedAt": "2024-10-19T02:45:41Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a property that is shared with the base OHTTP.  How important do you think that this is?  We already more or less include all the security considerations from the base protocol by reference.  Does this need a special callout?",
          "createdAt": "2024-07-31T02:49:22Z",
          "updatedAt": "2024-07-31T02:49:22Z"
        },
        {
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The original version of OHTTP was limited in terms of response sizes, which inherently limited the use cases that could work with it. Prior to this draft, the decision tree was:\r\n* small transaction -> OHTTP\r\n* long-lived exchange -> HTTPS-over-CONNECT\r\n\r\nThis specific draft changes this decision flow chart for long-lived exchanges, so we now need to explain when to pick one over the other.",
          "createdAt": "2024-07-31T16:26:16Z",
          "updatedAt": "2024-07-31T16:26:16Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "I_kwDOJtaXUM6a5Kas",
      "title": "Discuss interaction of replayability and interactivity",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/issues/27",
      "state": "CLOSED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/25#pullrequestreview-2370940482\r\n\r\nFrom @martinthomson 's comment:\r\n\r\n> If a message can be replayed, then how that is replayed might be exploited by a malicious relay to effect change.\r\n> \r\n> Maybe we need to do a little more analysis on that aspect of this. A section on interactivity and replay might help expound on those risks.\r\n\r\n",
      "createdAt": "2024-10-19T02:43:40Z",
      "updatedAt": "2024-12-09T04:30:12Z",
      "closedAt": "2024-12-09T04:30:12Z",
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "My understanding is that in the cases where there is no interaction, just a chunked response after a request completes, there isn't any new impact of a malicious replay by a relay (assuming the request is idempotent).\r\n\r\nIn the interactive case, agreed that more analysis would be good.",
          "createdAt": "2024-10-19T02:45:34Z",
          "updatedAt": "2024-10-19T02:45:34Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The core problem is that interactivity is really something that a client decides to do.  Though a server can observe the effect (we've covered that in the interactivity text we have now) that doesn't make interactive cases safe from replay.  Consider the case where there is a 100-continue in a request.  If that request is completed, it can still be replayed by the relay.  Its interactivity did not make it safer.\r\n\r\nNote that a interactivity is one of the things that TLS depends on, so some people might assume that this design gains similar benefits to what TLS provides.  Because we don't build in a dependency on interactivity, we don't get the liveness guarantees that TLS does.\r\n\r\nI think that's all there really is to say about that. I've spent a bit of time thinking about it, but I haven't come up with anything else.",
          "createdAt": "2024-12-09T03:42:58Z",
          "updatedAt": "2024-12-09T03:42:58Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the explanation, that makes sense!",
          "createdAt": "2024-12-09T04:26:40Z",
          "updatedAt": "2024-12-09T04:26:40Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 4,
      "id": "PR_kwDOJtaXUM5W2dZ2",
      "title": "Rename streamed to chunked",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/4",
      "state": "MERGED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1 ",
      "createdAt": "2023-07-31T22:34:54Z",
      "updatedAt": "2023-07-31T22:35:45Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "5431b6cf3db1f1c080cbdbbc6f95a769523f60c2",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "rename",
      "headRefOid": "a5c041b3e779fd01d67aa76c5aa2ef8f3d8b411f",
      "closedAt": "2023-07-31T22:35:44Z",
      "mergedAt": "2023-07-31T22:35:44Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "21a701d0a3456ea54db7a65a9f50098c6b615400"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 6,
      "id": "PR_kwDOJtaXUM5XsJcJ",
      "title": "Edit pass",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/6",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A few things:\r\n\r\n- author (whatever)\r\n- changed the label used (otherwise we have a confusability attack which leads to very easy truncation)\r\n- tweaked entropy according to a fix we just got for OHTTP\r\n- some language changes, especially in security considerations, largely based on what I heard in feedback at the last meeting",
      "createdAt": "2023-08-11T03:09:14Z",
      "updatedAt": "2023-08-11T03:20:44Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "3b58e4ec905165111515a990a9bdd2d12708ba79",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "martin",
      "headRefOid": "ec60789f16e1d66a73930dec514c6264c90ff18c",
      "closedAt": "2023-08-11T03:20:44Z",
      "mergedAt": "2023-08-11T03:20:44Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "f3dd16963c980057243c673352675f59961455a4"
      },
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks great, thank you!",
          "createdAt": "2023-08-11T03:20:20Z",
          "updatedAt": "2023-08-11T03:20:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM5dwWKW",
          "commit": {
            "abbreviatedOid": "ec60789"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-11T03:20:02Z",
          "updatedAt": "2023-08-11T03:20:10Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "Ah, the evidence of my find-and-replace... ",
              "createdAt": "2023-08-11T03:20:02Z",
              "updatedAt": "2023-08-11T03:20:10Z"
            }
          ]
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOJtaXUM5YHVRU",
      "title": "Add applicability section",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/8",
      "state": "MERGED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tfpauly"
      ],
      "labels": [],
      "body": "Closes #2\r\n\r\nFirst stab at this",
      "createdAt": "2023-08-17T03:31:23Z",
      "updatedAt": "2023-08-17T15:42:31Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "20db6ce4b0c456f2a85dad04a7619f9da54ec608",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "tfpauly-patch-1",
      "headRefOid": "8987a820e70cef5244dd83f9a0de627c19fabe3a",
      "closedAt": "2023-08-17T15:42:31Z",
      "mergedAt": "2023-08-17T15:42:31Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "595f4ef54c42911fdd9bb88aaaab5bf6e1fc218a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM5eRzZI",
          "commit": {
            "abbreviatedOid": "c818cd6"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good.  Feedback to be incorporated at your discretion.",
          "createdAt": "2023-08-17T03:34:19Z",
          "updatedAt": "2023-08-17T03:39:12Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "\"The\" as in \"only\"?",
              "createdAt": "2023-08-17T03:34:19Z",
              "updatedAt": "2023-08-17T03:39:12Z"
            },
            {
              "originalPosition": 20,
              "body": "Might be worth adding that the application needs to be able to accept the potential for messages to be truncated, with a reference to security considerations.",
              "createdAt": "2023-08-17T03:35:37Z",
              "updatedAt": "2023-08-17T03:39:12Z"
            },
            {
              "originalPosition": 11,
              "body": "Is that an em dash?",
              "createdAt": "2023-08-17T03:35:58Z",
              "updatedAt": "2023-08-17T03:39:12Z"
            },
            {
              "originalPosition": 6,
              "body": "Maybe cite section 2.1 of OHTTP.",
              "createdAt": "2023-08-17T03:37:01Z",
              "updatedAt": "2023-08-17T03:39:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJtaXUM5eWPIU",
          "commit": {
            "abbreviatedOid": "c818cd6"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-17T15:26:43Z",
          "updatedAt": "2023-08-17T15:26:44Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Probably better as \"one\":\r\n```suggestion\r\nOne specific functional capability that requires chunked Oblivious HTTP\r\n```",
              "createdAt": "2023-08-17T15:26:43Z",
              "updatedAt": "2023-08-17T15:26:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJtaXUM5eWT5s",
          "commit": {
            "abbreviatedOid": "c818cd6"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-17T15:34:55Z",
          "updatedAt": "2023-08-17T15:34:55Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Indeed it is =)",
              "createdAt": "2023-08-17T15:34:55Z",
              "updatedAt": "2023-08-17T15:34:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJtaXUM5eWUgy",
          "commit": {
            "abbreviatedOid": "c818cd6"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-17T15:36:15Z",
          "updatedAt": "2023-08-17T15:36:15Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nLike the non-chunked variant, chunked Oblivious HTTP has limited applicability\r\nas described in {{Section 2.1 of OHTTP}}, and requires the use of a willing\r\nOblivious Relay Resource and Oblivious Gateway Resource.\r\n```",
              "createdAt": "2023-08-17T15:36:15Z",
              "updatedAt": "2023-08-17T15:36:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJtaXUM5eWWmq",
          "commit": {
            "abbreviatedOid": "c818cd6"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-17T15:40:48Z",
          "updatedAt": "2023-08-17T15:40:48Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\npossible to process incrementally. Since incremental processing means that the\r\nmessage might end up being truncated, for example in the case of an error on the\r\nunderlying transport, applications also need to be prepared to safely handle incomplete\r\nmessages (see {{security}} for more discussion). Applications that use the Indeterminate\r\n```",
              "createdAt": "2023-08-17T15:40:48Z",
              "updatedAt": "2023-08-17T15:40:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJtaXUM5eWWzi",
          "commit": {
            "abbreviatedOid": "c818cd6"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-17T15:41:13Z",
          "updatedAt": "2023-08-17T15:41:14Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Done",
              "createdAt": "2023-08-17T15:41:13Z",
              "updatedAt": "2023-08-17T15:41:14Z"
            }
          ]
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOJtaXUM5anCfL",
      "title": "Update entropy variable name",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/11",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "`entropy` alone seems like it names a buffer, rather than an integer length.",
      "createdAt": "2023-09-18T20:33:00Z",
      "updatedAt": "2023-09-19T02:16:30Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "595f4ef54c42911fdd9bb88aaaab5bf6e1fc218a",
      "headRepository": "chris-wood/draft-ohai-chunked-ohttp",
      "headRefName": "patch-1",
      "headRefOid": "abfcf6ba3e78571c9aafae98649eeb937f9b421e",
      "closedAt": "2023-09-19T02:16:30Z",
      "mergedAt": "2023-09-19T02:16:30Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "41c04e1e51a8df302068376f8d9aea96eaaaf5d3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM5hSRvb",
          "commit": {
            "abbreviatedOid": "abfcf6b"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-19T00:11:38Z",
          "updatedAt": "2023-09-19T00:11:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJtaXUM5hSsH3",
          "commit": {
            "abbreviatedOid": "abfcf6b"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-19T02:16:24Z",
          "updatedAt": "2023-09-19T02:16:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOJtaXUM5aoEmj",
      "title": "Remove repetition of response_nonce assignment",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/14",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This will conflict with #11, but it's a trivial thing to merge that and do this again.\r\n\r\nCloses #12.",
      "createdAt": "2023-09-19T00:44:27Z",
      "updatedAt": "2023-09-19T02:18:04Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "41c04e1e51a8df302068376f8d9aea96eaaaf5d3",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "one-nonce",
      "headRefOid": "a4598899d854183e0f7cb91f580726f1ef9e2b86",
      "closedAt": "2023-09-19T02:18:03Z",
      "mergedAt": "2023-09-19T02:18:03Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "b63f5f55c8f767cd257461cfc4aa305a8eb0b8b4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM5hSszH",
          "commit": {
            "abbreviatedOid": "a459889"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-19T02:17:58Z",
          "updatedAt": "2023-09-19T02:17:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDOJtaXUM5kXtHj",
      "title": "Some rewording suggestions for chunking",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/15",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Not a big deal, but I though we could put more of the logic in prose than we were.",
      "createdAt": "2024-01-18T00:50:06Z",
      "updatedAt": "2024-01-18T18:54:34Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "118cd544ff1c821ff3949e6feb7aeb6bdf6d02cd",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "init-0",
      "headRefOid": "d73426d430203cfbc2eaf87cfc54358c2fa23a6e",
      "closedAt": "2024-01-18T18:54:34Z",
      "mergedAt": "2024-01-18T18:54:34Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "25e6979d34b6560b8c1277ed9bea2e0db91050b9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM5tGS_S",
          "commit": {
            "abbreviatedOid": "d73426d"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-18T18:54:29Z",
          "updatedAt": "2024-01-18T18:54:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOJtaXUM5kXw1G",
      "title": "Add some security considerations about interactivity risk",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/17",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is one of the key points that we'll need to resolve before people are comfortable taking this work on.  Hopefully this text helps.",
      "createdAt": "2024-01-18T01:08:15Z",
      "updatedAt": "2024-01-21T14:58:26Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "118cd544ff1c821ff3949e6feb7aeb6bdf6d02cd",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "rtt-measurement",
      "headRefOid": "8cb6aae562a6c2396dcf43e2ffc5b2a4a75c16b6",
      "closedAt": "2024-01-21T14:58:26Z",
      "mergedAt": "2024-01-21T14:58:26Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "5bcbb8b5592078115e1f7bc836dd9da34ac9f578"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM5tGUpC",
          "commit": {
            "abbreviatedOid": "1d096c5"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-18T18:58:53Z",
          "updatedAt": "2024-01-18T18:58:57Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "I think it might be useful to point out that clients can choose to not be interactive.\r\n\r\n```suggestion\r\nIn order to prevent the Oblivious Gateway Resource from observing the round trip time\r\nto the client, client implementations can choose to not base the sending of request chunks based\r\non received response chunks. These interactions can still benefit from chunked processing,\r\nwithout incurring additional observability risks.\r\n```",
              "createdAt": "2024-01-18T18:58:53Z",
              "updatedAt": "2024-01-18T18:58:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJtaXUM5tZWHB",
          "commit": {
            "abbreviatedOid": "8cb6aae"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-21T14:58:20Z",
          "updatedAt": "2024-01-21T14:58:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOJtaXUM50Y9V6",
      "title": "Maximum number of chunks",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/21",
      "state": "MERGED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #9",
      "createdAt": "2024-07-04T02:36:38Z",
      "updatedAt": "2024-07-08T22:05:19Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "1ce96ce4cfd2d7d3036d87fb9ceed40d51b843d3",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "tfpauly-patch-2",
      "headRefOid": "6ca4f972b94a195493b2d4e6cc42a1e447443f90",
      "closedAt": "2024-07-08T22:05:05Z",
      "mergedAt": "2024-07-08T22:05:05Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "93cd5616c05b984bae716fdfc3ca6cb04759d026"
      },
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood please check if this looks right",
          "createdAt": "2024-07-04T02:36:48Z",
          "updatedAt": "2024-07-04T02:36:48Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "(Chris confirmed offline)\r\n",
          "createdAt": "2024-07-08T22:05:19Z",
          "updatedAt": "2024-07-08T22:05:19Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 22,
      "id": "PR_kwDOJtaXUM52h6yp",
      "title": "Fix draft metadata",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/22",
      "state": "MERGED",
      "author": "DavidSchinazi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-26T02:14:33Z",
      "updatedAt": "2024-07-31T02:48:09Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "93cd5616c05b984bae716fdfc3ca6cb04759d026",
      "headRepository": "DavidSchinazi/draft-ohai-chunked-ohttp",
      "headRefName": "patch-1",
      "headRefOid": "3b146193c14e7e82318c7b71b38be0e96761ef22",
      "closedAt": "2024-07-31T02:48:09Z",
      "mergedAt": "2024-07-31T02:48:09Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "dc7940bce550ab5f599b312ed2b31177473a2710"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM6Dq1U1",
          "commit": {
            "abbreviatedOid": "3b14619"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-31T02:48:04Z",
          "updatedAt": "2024-07-31T02:48:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 24,
      "id": "PR_kwDOJtaXUM5-sIDU",
      "title": "Reference incremental header, provide example",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/24",
      "state": "MERGED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tfpauly"
      ],
      "labels": [],
      "body": "Closes #19 \r\nCloses #20",
      "createdAt": "2024-10-15T14:55:21Z",
      "updatedAt": "2024-10-19T02:40:58Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "dc7940bce550ab5f599b312ed2b31177473a2710",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "tfpauly-patch-3",
      "headRefOid": "b55648da249f717ac1824233d2dcf8eb4fed4e49",
      "closedAt": "2024-10-19T02:40:58Z",
      "mergedAt": "2024-10-19T02:40:58Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "57916fe71329f5dfb034a9d4ec94de14d452f8b8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM6NUaDX",
          "commit": {
            "abbreviatedOid": "46dedd4"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-16T00:58:31Z",
          "updatedAt": "2024-10-16T00:58:35Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nChunked OHTTP requests and responses SHOULD include the\r\n```",
              "createdAt": "2024-10-16T00:58:32Z",
              "updatedAt": "2024-10-16T00:58:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJtaXUM6NaCdQ",
          "commit": {
            "abbreviatedOid": "46dedd4"
          },
          "author": "kazuho",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-16T13:05:45Z",
          "updatedAt": "2024-10-16T13:05:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 25,
      "id": "PR_kwDOJtaXUM5-sdtl",
      "title": "Mention forward secrecy",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/25",
      "state": "MERGED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tfpauly"
      ],
      "labels": [],
      "body": "Closes #23 \r\n\r\nMake it more explicit that we inherit the security considerations of normal OHTTP",
      "createdAt": "2024-10-15T15:28:13Z",
      "updatedAt": "2024-10-19T02:45:41Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "dc7940bce550ab5f599b312ed2b31177473a2710",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "tfpauly-patch-4",
      "headRefOid": "ae8c6b6936c859e8beec97097a973d6f4420ab14",
      "closedAt": "2024-10-19T02:45:40Z",
      "mergedAt": "2024-10-19T02:45:40Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "0f1d398011e1cd85f6ccbabe3a6c363462ec56e1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM6NUa5C",
          "commit": {
            "abbreviatedOid": "09c3250"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This is where I start to agree with those who express concerns about this design.  If a message can be replayed, then how that is replayed might be exploited by a malicious relay to effect change.\r\n\r\nMaybe we need to do a little more analysis on that aspect of this. A section on interactivity and replay might help expound on those risks.",
          "createdAt": "2024-10-16T01:00:11Z",
          "updatedAt": "2024-10-16T01:02:21Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nchanging the key configuration. This is particularly important when chunking is\r\nused to enable interactivity.\r\n```",
              "createdAt": "2024-10-16T01:00:11Z",
              "updatedAt": "2024-10-16T01:02:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 26,
      "id": "PR_kwDOJtaXUM5-wFeM",
      "title": "Moar paragiraffes",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/26",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This one was getting a very long neck.",
      "createdAt": "2024-10-16T01:03:19Z",
      "updatedAt": "2024-10-19T02:46:01Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "dc7940bce550ab5f599b312ed2b31177473a2710",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "pgf",
      "headRefOid": "ab4176507dac5539b29669ca03a0f11fe7f4efdc",
      "closedAt": "2024-10-19T02:46:01Z",
      "mergedAt": "2024-10-19T02:46:01Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "b4d0e2c1d19b1cc22aeea694108df73ea28da1e9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 28,
      "id": "PR_kwDOJtaXUM6C87iR",
      "title": "Workflow update",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/28",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current workflows we're using will break in a few weeks.  The scripts turned up a few other maintenance tidbits too.",
      "createdAt": "2024-11-24T22:29:58Z",
      "updatedAt": "2024-12-02T03:49:03Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "b4d0e2c1d19b1cc22aeea694108df73ea28da1e9",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "workflow-update",
      "headRefOid": "db486cbeaaeebf296ebcc9111459c4e23edbf1d6",
      "closedAt": "2024-12-02T03:49:03Z",
      "mergedAt": "2024-12-02T03:49:03Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "b22e4612bb6b1bac86c685f7d248f037caef233d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM6TUw-b",
          "commit": {
            "abbreviatedOid": "db486cb"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-02T03:48:59Z",
          "updatedAt": "2024-12-02T03:48:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 29,
      "id": "PR_kwDOJtaXUM6DsPux",
      "title": "Maximum chunk sizes",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/29",
      "state": "MERGED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Limit to 16K chunk sizes. This currently defines it as the plaintext size, but we could also include the tag to be the full chunk length. I don't have a strong opinion here.\r\n\r\nCloses #7 ",
      "createdAt": "2024-12-02T04:11:53Z",
      "updatedAt": "2024-12-09T02:05:38Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "a67ac5e8dd1abf672e612f4db8f93233d0fc4f86",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "tfpauly-patch-5",
      "headRefOid": "9ec01d493e8916acfaaa59de6f14e3f5e24d8706",
      "closedAt": "2024-12-09T02:05:38Z",
      "mergedAt": "2024-12-09T02:05:38Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "50ce865b88d429987cc86698d3bf05cb3c229eab"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM6TcfOK",
          "commit": {
            "abbreviatedOid": "9ec01d4"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-02T19:23:21Z",
          "updatedAt": "2024-12-02T19:23:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJtaXUM6UQ9cH",
          "commit": {
            "abbreviatedOid": "9ec01d4"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-09T02:05:32Z",
          "updatedAt": "2024-12-09T02:05:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOJtaXUM6DsSj8",
      "title": "Explain negotiation",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/30",
      "state": "MERGED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #5",
      "createdAt": "2024-12-02T04:24:42Z",
      "updatedAt": "2024-12-09T04:24:54Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "a67ac5e8dd1abf672e612f4db8f93233d0fc4f86",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "tfpauly-patch-6",
      "headRefOid": "e7fef270f12d87898cc84366dd8f5bc2446bc6d6",
      "closedAt": "2024-12-09T04:24:53Z",
      "mergedAt": "2024-12-09T04:24:53Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "abc5cdb70c80aab0658e4c61069a430509d8d124"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM6Tcfz3",
          "commit": {
            "abbreviatedOid": "f897975"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-02T19:24:37Z",
          "updatedAt": "2024-12-02T19:24:53Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nan inconsistent view of which variant to use, which could be used to partition client anonymity sets.\r\n```",
              "createdAt": "2024-12-02T19:24:37Z",
              "updatedAt": "2024-12-02T19:24:54Z"
            },
            {
              "originalPosition": 29,
              "body": "```suggestion\r\nFalling back would allow clients to have inconsistent behavior that could be used to partition client anonymity sets.\r\n```",
              "createdAt": "2024-12-02T19:24:51Z",
              "updatedAt": "2024-12-02T19:24:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJtaXUM6UQ_Ui",
          "commit": {
            "abbreviatedOid": "4d63b5f"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This seems good.  Just a rewording tweak in a suggestion.",
          "createdAt": "2024-12-09T02:07:51Z",
          "updatedAt": "2024-12-09T02:08:29Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nwill fail as if OHTTP as a whole were not supported. If clients retry requests\r\nwith the non-chunked media type, a gateway could partition client anonymity\r\nsets by rejecting some requests and accepting others.\r\n```",
              "createdAt": "2024-12-09T02:07:52Z",
              "updatedAt": "2024-12-09T02:08:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 31,
      "id": "PR_kwDOJtaXUM6EW0N2",
      "title": "Explain interactivity case more clearly",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/31",
      "state": "MERGED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-12-06T17:42:19Z",
      "updatedAt": "2024-12-09T04:25:16Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "a67ac5e8dd1abf672e612f4db8f93233d0fc4f86",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "tfpauly-patch-7",
      "headRefOid": "56ac910c403e0d3a4b7e209b7e0c0d6a61e02559",
      "closedAt": "2024-12-09T04:25:16Z",
      "mergedAt": "2024-12-09T04:25:16Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "db3b1bf87188e56e056e7ea4302458ee93da8bec"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM6UJn3t",
          "commit": {
            "abbreviatedOid": "cf4a4d8"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-06T17:58:34Z",
          "updatedAt": "2024-12-06T18:01:27Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nIn the interactive case, the Oblivious Gateway Resource can\r\n```",
              "createdAt": "2024-12-06T17:58:34Z",
              "updatedAt": "2024-12-06T18:01:27Z"
            },
            {
              "originalPosition": 52,
              "body": "```suggestion\r\nof the possibility that interactively processing chunks might reveal information to the\r\nOblivious Gateway Resource that is otherwise kept private.\r\n```",
              "createdAt": "2024-12-06T18:00:46Z",
              "updatedAt": "2024-12-06T18:02:29Z"
            },
            {
              "originalPosition": 56,
              "body": "```suggestion\r\n\r\nInteractivity that is deliberate might be acceptable. For instance, the\r\n```",
              "createdAt": "2024-12-06T18:01:01Z",
              "updatedAt": "2024-12-06T18:01:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJtaXUM6URLwx",
          "commit": {
            "abbreviatedOid": "cad5286"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This is a good addition.",
          "createdAt": "2024-12-09T02:50:04Z",
          "updatedAt": "2024-12-09T02:56:45Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "```suggestion\r\nby ensuring that the sending of request chunks cannot be influenced by the response.\r\n```",
              "createdAt": "2024-12-09T02:50:04Z",
              "updatedAt": "2024-12-09T02:56:45Z"
            },
            {
              "originalPosition": 53,
              "body": "```suggestion\r\n\r\nFor cases when interactivity introduces unacceptable risks, the client can ensure that it never has an\r\n```",
              "createdAt": "2024-12-09T02:50:24Z",
              "updatedAt": "2024-12-09T02:56:45Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\n  chunk. This is a non-interactive case that is identical to the non-chunked\r\n```",
              "createdAt": "2024-12-09T02:51:41Z",
              "updatedAt": "2024-12-09T02:56:45Z"
            },
            {
              "originalPosition": 37,
              "body": "```suggestion\r\n  chunks. This is a non-interactive case, because there is no possibility\r\n```",
              "createdAt": "2024-12-09T02:51:56Z",
              "updatedAt": "2024-12-09T02:56:45Z"
            },
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n  is sent after receiving -- and possibly processing -- a response chunk (or the complete response), where\r\n```",
              "createdAt": "2024-12-09T02:53:18Z",
              "updatedAt": "2024-12-09T02:56:45Z"
            }
          ]
        }
      ]
    },
    {
      "number": 32,
      "id": "PR_kwDOJtaXUM6EelT1",
      "title": "Interactivity and replay",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/32",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Interactivity doesn't inherently help.\r\n\r\nCloses #27.",
      "createdAt": "2024-12-09T04:08:23Z",
      "updatedAt": "2024-12-10T03:04:27Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "db3b1bf87188e56e056e7ea4302458ee93da8bec",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "interactive-replay",
      "headRefOid": "8aea4b83728328f2418e1d0f19f11a3eedde4ad1",
      "closedAt": "2024-12-09T04:30:11Z",
      "mergedAt": "2024-12-09T04:30:11Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "bd72928617d23d41fe5d24bd7471698887fd7269"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM6UR197",
          "commit": {
            "abbreviatedOid": "8aea4b8"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-09T04:30:05Z",
          "updatedAt": "2024-12-09T04:30:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 33,
      "id": "PR_kwDOJtaXUM6EnDSQ",
      "title": "Fix the pseudocode for the final chunk",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/33",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We were including the length of that chunk, but we should be including a zero.",
      "createdAt": "2024-12-09T21:53:07Z",
      "updatedAt": "2024-12-09T21:58:57Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "bd72928617d23d41fe5d24bd7471698887fd7269",
      "headRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "headRefName": "final-chunk-len",
      "headRefOid": "3eddbcbf805625e01ee12484002f1e3f70b73afd",
      "closedAt": "2024-12-09T21:58:57Z",
      "mergedAt": "2024-12-09T21:58:57Z",
      "mergedBy": "tfpauly",
      "mergeCommit": {
        "oid": "03d98be2658f1b54b8da6cfd9e5f24e7a0815a36"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM6UbXVK",
          "commit": {
            "abbreviatedOid": "3eddbcb"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-09T21:58:22Z",
          "updatedAt": "2024-12-09T21:58:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 34,
      "id": "PR_kwDOJtaXUM6HguDw",
      "title": "Add details on counter encoding",
      "url": "https://github.com/ietf-wg-ohai/draft-ohai-chunked-ohttp/pull/34",
      "state": "OPEN",
      "author": "willemschots",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "First of all, thanks for the great work on this Draft RFC, it's been very useful so far!\r\n\r\nI've been working on implementing chunked responses and I would suggest to add a bit more detail on the counter encoding.\r\n\r\nIf I understand correctly, senders and receivers will need to use the same encoding to end up with the same `chunk_nonce`. To maintain compatibility between different implementations I think it would be good to have this encoding spelled out in the RFC.\r\n\r\nIn the PR I suggest we specify to use Big Endian encoding, but that's just to illustrate the level of detail I'm suggesting. If a different encoding is more appropriate, I'd be happy to make changes.\r\n\r\n",
      "createdAt": "2025-01-13T10:37:17Z",
      "updatedAt": "2025-01-13T17:20:30Z",
      "baseRepository": "ietf-wg-ohai/draft-ohai-chunked-ohttp",
      "baseRefName": "main",
      "baseRefOid": "03d98be2658f1b54b8da6cfd9e5f24e7a0815a36",
      "headRepository": "willemschots/draft-ohai-chunked-ohttp",
      "headRefName": "patch-1",
      "headRefOid": "6ad9f27d81713223dc6700f75e8b3962bf9c6533",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "willemschots",
          "authorAssociation": "NONE",
          "body": "Top! Have included your suggested text, flows a bit better :+1: ",
          "createdAt": "2025-01-13T17:20:28Z",
          "updatedAt": "2025-01-13T17:20:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJtaXUM6X07ui",
          "commit": {
            "abbreviatedOid": "720db7b"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks for pointing out this area for clarification! Totally agree that is useful. I added a suggestion for the text to align a bit more with what RFC 9180 says for the equivalent counter.",
          "createdAt": "2025-01-13T16:54:05Z",
          "updatedAt": "2025-01-13T16:54:49Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nThe `encode(Nn, counter)` function must encode the counter as a big-endian\r\ninteger. If the length of the counter is shorter than `Nn`, it should be padded by\r\nprefixing zero bytes.\r\n```",
              "createdAt": "2025-01-13T16:54:05Z",
              "updatedAt": "2025-01-13T16:54:49Z"
            }
          ]
        }
      ]
    }
  ]
}